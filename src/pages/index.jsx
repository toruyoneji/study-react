import Head from "next/head";
import Image from "next/image";
import { Geist, Geist_Mono } from "next/font/google";
import styles from "../styles/Home.module.css";
import { Footer } from "@/src/components/Footer";
import { Links } from "@/src/components/Links";
import { Headline } from "@/src/components/Headline";
import { MainBody } from "@/src/components/Main";
import { Header } from "@/src/components/Header";
import { useCallback, useEffect, useState } from "react";
import { isHTTPMethod } from "next/dist/server/web/http";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});


export default function Home() {

  const [count, setCount] = useState(1);
  const [text, setText] = useState("");
  const [isShow, setIsShow] = useState(true);
  const [array, setArray] = useState([]);

  const handleClick = useCallback(() => {
    console.log(count);
    if(count < 10) {
    setCount((count) => count + 1);
    }
  },[count]);

  const handleChange = useCallback((e) => {
    if(e.target.value.length > 5) {
      alert("5文字以内にしてください");
      return;
    }
    setText(e.target.value.trim());
    //console.log(text);
  }, []);

  const handleShow = useCallback(() => {
    setIsShow((isShow) => (!isShow));
  }, []);

  const handleArray = useCallback(() => {
      setArray((prevArray) => {
        if(prevArray.some(item => item === text)) {
          alert("同じテキストは追加できません");
          return prevArray;
        }
        
        return [...prevArray, text];
      });
  }, [text]);

  useEffect(() => {
    
    document.body.style.backgroundColor = "lightblue";

    return () => {
   
    document.body.style.backgroundColor = "yellowgreen";

    };
}, []);

  return (
    <>
      <Head>
        <title>index Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        
      </Head>
      <div
        className={`${styles.page} ${geistSans.variable} ${geistMono.variable}`}
      >
        <Header />

        {isShow ? <h2>{count}</h2> : null}
        <button className={styles.button} onClick={handleClick}>ボタン</button>
        <button className={styles.button} onClick={handleShow}>
          {isShow ? "非表示" : "表示"}</button>


        <input type="text" value={text} onChange={handleChange} />

        <button className={styles.button} onClick={handleArray}>Add Array</button>

        <ul>
          {array.map((item) => {
            return <li key={item}>{item}</li>
          })}
        </ul>

        <MainBody page="index" /> 

        <Footer />
      </div>
    </>
  );
}
